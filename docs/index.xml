<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peter Villano&#39;s Personal Site</title>
    <link>https://saej.in/</link>
    <description>Recent content on Peter Villano&#39;s Personal Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Jan 2024 13:35:40 -0400</lastBuildDate>
    <atom:link href="https://saej.in/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advent of Code Reflections</title>
      <link>https://saej.in/post/advent-of-code-reflections/</link>
      <pubDate>Thu, 11 Jan 2024 13:35:40 -0400</pubDate>
      <guid>https://saej.in/post/advent-of-code-reflections/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This year&amp;rsquo;s Advent of Code was a good year for me.&#xA;I scored in the top 100 twice, on days 11 and 12.&lt;/p&gt;&#xA;&lt;p&gt;I never used my auto-submitter,&#xA;but I did use my input fetcher and testing methods.&#xA;Every year I start having forgotten what these functions do,&#xA;and by the end I&amp;rsquo;ve made them more complex than they were the previous year.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;extract_ints()&lt;/code&gt; proved to be very useful this year.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Two Billion Towers of Time</title>
      <link>https://saej.in/post/hanoi/</link>
      <pubDate>Wed, 11 Oct 2023 21:02:14 -0500</pubDate>
      <guid>https://saej.in/post/hanoi/</guid>
      <description>&lt;script type=&#34;module&#34;&gt;&#xD;&#xA;    &#34;use strict&#34;&#xD;&#xA;    const t0 = Date.now()&#xD;&#xA;&#xD;&#xA;    function pole(ring, time) {&#xD;&#xA;        let x = (time + (1 &lt;&lt; ring) &gt;&gt; (ring + 1)) % 3&#xD;&#xA;        if (ring % 2 === 1) {&#xD;&#xA;            x = 3 - x&#xD;&#xA;        }&#xD;&#xA;        return (x + 3) % 3&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function accelDecel(t) {&#xD;&#xA;        if (t &lt; .5) {&#xD;&#xA;            return t ** 2 * 2&#xD;&#xA;        } else {&#xD;&#xA;            &#xD;&#xA;            t = (t - .5) * 2&#xD;&#xA;            t = 1 - t&#xD;&#xA;            t = t ** 2&#xD;&#xA;            t = 1 - t&#xD;&#xA;            return .5 + t / 2&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function lerp(a, b, t) {&#xD;&#xA;        return a + t * (b - a)&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    const n = 31&#xD;&#xA;&#xD;&#xA;    const canvas = document.getElementById(&#34;canvas0&#34;)&#xD;&#xA;    const div = document.getElementById(&#34;hanoiDiv0&#34;)&#xD;&#xA;    const ctx = canvas.getContext(&#34;2d&#34;)&#xD;&#xA;    function draw() {&#xD;&#xA;&#xD;&#xA;        canvas.style.width = `${div.clientWidth}px`&#xD;&#xA;        canvas.style.height = `${div.clientWidth * .4}px`&#xD;&#xA;        canvas.width = Math.floor(div.clientWidth * window.devicePixelRatio)&#xD;&#xA;        canvas.height = Math.floor(div.clientWidth * window.devicePixelRatio * 9 / 16)&#xD;&#xA;&#xD;&#xA;        const width = canvas.width&#xD;&#xA;        const height = canvas.height&#xD;&#xA;&#xD;&#xA;        const dy = height / (n + 2)&#xD;&#xA;        const dx = width / (n + 1 + n) / 3&#xD;&#xA;&#xD;&#xA;        ctx.clearRect(0, 0, width, height)&#xD;&#xA;        ctx.translate(0, dy)&#xD;&#xA;        &#xD;&#xA;        ctx.fillStyle = &#34;rgb(0,0,0)&#34;&#xD;&#xA;        ctx.fillRect(0, n * dy, width, dy)&#xD;&#xA;&#xD;&#xA;        const time = Date.now()&#xD;&#xA;        const seconds = Math.floor(time / 1000)&#xD;&#xA;        const millis = time % 1000&#xD;&#xA;&#xD;&#xA;        const discCount = [0, 0, 0]&#xD;&#xA;        let discInMotion = -1&#xD;&#xA;        for (let i = n - 1; i &gt;= 0; i--) {&#xD;&#xA;            const p = pole(i, seconds)&#xD;&#xA;            if (p !== pole(i, seconds + 1)) {&#xD;&#xA;                discInMotion = i&#xD;&#xA;                continue&#xD;&#xA;            }&#xD;&#xA;            const centerX = (p + 0.5) * width / 3&#xD;&#xA;            const discWidth = (2 * i + 3) * dx&#xD;&#xA;            const x = centerX - discWidth / 2&#xD;&#xA;            const y = (n - 1 - discCount[p]) * dy&#xD;&#xA;            discCount[p]++&#xD;&#xA;            ctx.fillRect(x, y, discWidth, dy * .9)&#xD;&#xA;        }&#xD;&#xA;        if (discInMotion === -1) {&#xD;&#xA;            window.requestAnimationFrame(draw)&#xD;&#xA;            return&#xD;&#xA;        }&#xD;&#xA;        const percentDone = millis / 1000&#xD;&#xA;        const xFract = accelDecel(percentDone)&#xD;&#xA;        const startPole = pole(discInMotion, seconds)&#xD;&#xA;        const endPole = pole(discInMotion, seconds + 1)&#xD;&#xA;        const xIdx = lerp(startPole, endPole, xFract)&#xD;&#xA;        const centerX = (xIdx + 0.5) * width / 3&#xD;&#xA;        const discWidth = (2 * discInMotion + 3) * dx&#xD;&#xA;        const x = centerX - discWidth / 2&#xD;&#xA;&#xD;&#xA;        let apex = Math.max(discCount[startPole], discCount[endPole], discCount[1])&#xD;&#xA;        apex = Math.min(apex + 1, n)&#xD;&#xA;        const riseDistance = apex - discCount[startPole]&#xD;&#xA;        const riseTime = 2 * Math.sqrt(riseDistance) &#xD;&#xA;        const fallDistance = apex - discCount[endPole]&#xD;&#xA;        const fallTime = Math.sqrt(2 * fallDistance)  &#xD;&#xA;&#xD;&#xA;        let yIdx&#xD;&#xA;        const apexTime = riseTime / (riseTime + fallTime)&#xD;&#xA;        if (percentDone &lt; apexTime) {&#xD;&#xA;            yIdx = lerp(discCount[startPole], apex, accelDecel(percentDone / apexTime))&#xD;&#xA;        } else {&#xD;&#xA;            const pd2 = ((percentDone - apexTime) / (1 - apexTime)) ** 2&#xD;&#xA;            yIdx = lerp(apex, discCount[endPole], pd2)&#xD;&#xA;        }&#xD;&#xA;        const y = (n - 1 - yIdx) * dy&#xD;&#xA;&#xD;&#xA;        ctx.fillRect(x, y, discWidth, dy * .9)&#xD;&#xA;&#xD;&#xA;        window.requestAnimationFrame(draw)&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    window.requestAnimationFrame(draw)&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&lt;div id=&#34;hanoiDiv0&#34; style=&#34;width:100%&#34;&gt;&#xD;&#xA;    &lt;canvas height=&#34;500&#34; id=&#34;canvas0&#34; style=&#34;width:100%&#34; width=&#34;1000&#34;&gt;&lt;/canvas&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;hahahugoshortcode16s1hbhb&#34;&gt;&lt;q&gt;&#xD;&#xA;  When the final tower is completed, time will overflow.&#xD;&#xA;&lt;/q&gt;&lt;/h2&gt;&#xA;&lt;p&gt;This &lt;a href=&#34;#animation&#34;&gt;animation&lt;/a&gt; counts down to the &lt;a href=&#34;#epochalypse&#34;&gt;Epochalypse&lt;/a&gt;&#xA;by displaying the current &lt;a href=&#34;#unix-time&#34;&gt;Unix time&lt;/a&gt;&#xA;as progress in solving a 31 level &lt;a href=&#34;#hanoi&#34;&gt;Tower of Hanoi&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openscad Facet Size</title>
      <link>https://saej.in/post/openscad-facet-size/</link>
      <pubDate>Mon, 26 Sep 2022 19:47:49 -0400</pubDate>
      <guid>https://saej.in/post/openscad-facet-size/</guid>
      <description>&lt;p&gt;I recommend starting with the following settings as a baseline, and increasing &lt;code&gt;$fs&lt;/code&gt; if the GUI becomes slow.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-openscad&#34; data-lang=&#34;openscad&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$fn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$fs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;&#xA;&lt;p&gt;Three variables determine the faceted-ness of your model.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;$fa&lt;/strong&gt; is the minimum angle for a fragment.&#xA;It creates a size-independent upper bound for &lt;em&gt;number of facets&lt;/em&gt; in a circle.&#xA;This bound is exactly &lt;code&gt;ceil(360/$fa)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;$fs&lt;/strong&gt; sets the minimum facet size in millimeters.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;$fn&lt;/strong&gt; is a complete override on the number of facts.&#xA;This can be used when an exact number of facets is desired.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;$fn&lt;/strong&gt; is useful for creating regular n-gons&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;old-method&#34;&gt;Old Method&lt;/h1&gt;&#xA;&lt;p&gt;I used to use different quality levels for preview and render with the code snippet.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&lt;details&gt; Added to Hugo Theme</title>
      <link>https://saej.in/post/details/</link>
      <pubDate>Mon, 27 Jun 2022 23:26:21 -0400</pubDate>
      <guid>https://saej.in/post/details/</guid>
      <description>&lt;p&gt;I added a &#xD;&#xA;&lt;details&gt;&#xD;&#xA;    &lt;summary&gt;&#xD;&#xA;        &amp;lt;details/&amp;gt; tag&#xD;&#xA;    &lt;/summary&gt;&#xD;&#xA;         (I haven&#39;t added any styles yet) &#xD;&#xA;&lt;/details&gt;&#xD;&#xA; tag to my hugo theme&lt;/p&gt;</description>
    </item>
    <item>
      <title>Assert Considered Helpful</title>
      <link>https://saej.in/post/assert/</link>
      <pubDate>Wed, 25 May 2022 13:35:26 -0400</pubDate>
      <guid>https://saej.in/post/assert/</guid>
      <description>&lt;p&gt;Last Advent of Code I took to putting assert statements for every invariant in my code. Most of my time was spent debugging, not the first write or running code. Adding so many asserts provided a number of benefits:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Assert statements are a compact form of documenting invariants, both expected and produced, making code easier to reason about.&lt;/li&gt;&#xA;&lt;li&gt;Each assert serves as a concise unit test with exactly the necessary cases.&lt;/li&gt;&#xA;&lt;li&gt;Most importantly, asserts catch logic bugs when code doesn&amp;rsquo;t produce the intended results&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Writing about this has me thinking, there should be a tool to transform assert statements into testing. The tool would have another keyword &amp;ldquo;expect&amp;rdquo; in addition to &amp;ldquo;assert&amp;rdquo;, for preconditions. With both preconditions and postconditions, individual functions can be automatically verified with a prover or a fuzzer! The tool could also check that preconditions are met at each call site, without having to write and rewrite unit tests for each call site!&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Log In to Airport Wifi</title>
      <link>https://saej.in/post/how-to-log-in-to-airport-wifi/</link>
      <pubDate>Tue, 12 Apr 2022 10:32:51 -0500</pubDate>
      <guid>https://saej.in/post/how-to-log-in-to-airport-wifi/</guid>
      <description>&lt;p&gt;Have you ever tried to connect to a public Wi-Fi network, but can&amp;rsquo;t get the Terms of Service page to show up?&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s how to fix that!&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Connect to the Wi-Fi network.&lt;/li&gt;&#xA;&lt;li&gt;open &lt;a href=&#34;http://neverssl.com&#34;&gt;http://neverssl.com&lt;/a&gt;. Your browser will redirect you to a captive portal.&lt;/li&gt;&#xA;&lt;li&gt;Accept terms of service and continue to the internet.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;why-this-works&#34;&gt;Why this works&lt;/h1&gt;&#xA;&lt;p&gt;At home, when you try to load a web page, your device sends a request over Wi-Fi to your &lt;em&gt;router&lt;/em&gt; which &lt;em&gt;routes&lt;/em&gt; the request to another router and so on, until it gets to the &lt;em&gt;server&lt;/em&gt; which &lt;em&gt;hosts&lt;/em&gt; the webpage. The &lt;em&gt;server&lt;/em&gt; then &lt;em&gt;serves&lt;/em&gt; the webpage over the same chain of routers back to you.&lt;/p&gt;</description>
    </item>
    <item>
      <title>requirements.txt Trick</title>
      <link>https://saej.in/post/requirements-txt-trick/</link>
      <pubDate>Tue, 28 Dec 2021 02:17:28 -0500</pubDate>
      <guid>https://saej.in/post/requirements-txt-trick/</guid>
      <description>&lt;p&gt;Sometimes you find yourself in a legacy project with a single requirements.txt file containing pinned dependencies.&#xA;A CVE is released, and you update the relevant package to the latest version,&#xA;but now there are incompatibilities.&lt;/p&gt;&#xA;&lt;p&gt;This is a way to manage dependencies in such a python project.&#xA;Create a &lt;code&gt;requirements.txt&lt;/code&gt; file with the packages you need but not their dependencies.&#xA;The following script will generate a file &lt;code&gt;requirements-frozen.txt&lt;/code&gt; with the specified packages and all their dependencies version pinned.&#xA;Commit both files to version management.&#xA;Add or remove packages from &lt;code&gt;requirements.txt&lt;/code&gt; and use &lt;code&gt;requirements-frozen.txt&lt;/code&gt; for reproducible builds.&#xA;To update all packages, re-run the script.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>https://saej.in/post/hello/</link>
      <pubDate>Tue, 28 Dec 2021 02:17:27 -0500</pubDate>
      <guid>https://saej.in/post/hello/</guid>
      <description>&lt;p&gt;Hello World! I&amp;rsquo;ve got a blog now! This site is built with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and love.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Word of the Day</title>
      <link>https://saej.in/word-of-the-day/</link>
      <pubDate>Wed, 31 Dec 1969 17:00:00 -0700</pubDate>
      <guid>https://saej.in/word-of-the-day/</guid>
      <description>&lt;p&gt;The word of the day is &lt;strong&gt;anisotropic&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Anisotropic means &lt;em&gt;not&lt;/em&gt; the same in every direction.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://saej.in/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://saej.in/about/</guid>
      <description>&lt;p&gt;Hi, I&amp;rsquo;m Rocky. I enjoy 3D printing, watching animation, and PC gaming. I graduated from the Purdue University in 2019. I majored in Computer Science and minored in Psychology and Mathematics. I am non-binary. My pronouns are they/them.&lt;/p&gt;&#xA;&lt;h1 id=&#34;posts&#34;&gt;&lt;a href=&#34;https://saej.in/&#34;&gt;Posts&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;linkedin&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/in/pvillan/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;github&#34;&gt;&lt;a href=&#34;https://github.com/pvillano&#34;&gt;Github&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;3d-printables&#34;&gt;&lt;a href=&#34;https://www.printables.com/social/114452-pvillano/about&#34;&gt;3D Printables&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;shadertoy&#34;&gt;&lt;a href=&#34;https://www.shadertoy.com/user/pvillano&#34;&gt;Shadertoy&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;resume-pdf&#34;&gt;&lt;a href=&#34;https://saej.in/resume.html&#34;&gt;Resume&lt;/a&gt; (&lt;a href=&#34;peter-villano-resume.pdf&#34;&gt;pdf&lt;/a&gt;)&lt;/h1&gt;</description>
    </item>
  </channel>
</rss>
