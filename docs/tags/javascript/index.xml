<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Peter Villano&#39;s Personal Site</title>
    <link>https://saej.in/tags/javascript/</link>
    <description>Recent content in Javascript on Peter Villano&#39;s Personal Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Oct 2023 21:02:14 -0500</lastBuildDate>
    <atom:link href="https://saej.in/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Two Billion Towers of Time</title>
      <link>https://saej.in/post/hanoi/</link>
      <pubDate>Wed, 11 Oct 2023 21:02:14 -0500</pubDate>
      <guid>https://saej.in/post/hanoi/</guid>
      <description>&lt;script type=&#34;module&#34;&gt;&#xD;&#xA;    &#34;use strict&#34;&#xD;&#xA;    const t0 = Date.now()&#xD;&#xA;&#xD;&#xA;    function pole(ring, time) {&#xD;&#xA;        let x = (time + (1 &lt;&lt; ring) &gt;&gt; (ring + 1)) % 3&#xD;&#xA;        if (ring % 2 === 1) {&#xD;&#xA;            x = 3 - x&#xD;&#xA;        }&#xD;&#xA;        return (x + 3) % 3&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function accelDecel(t) {&#xD;&#xA;        if (t &lt; .5) {&#xD;&#xA;            return t ** 2 * 2&#xD;&#xA;        } else {&#xD;&#xA;            &#xD;&#xA;            t = (t - .5) * 2&#xD;&#xA;            t = 1 - t&#xD;&#xA;            t = t ** 2&#xD;&#xA;            t = 1 - t&#xD;&#xA;            return .5 + t / 2&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function lerp(a, b, t) {&#xD;&#xA;        return a + t * (b - a)&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    const n = 31&#xD;&#xA;&#xD;&#xA;    const canvas = document.getElementById(&#34;canvas0&#34;)&#xD;&#xA;    const div = document.getElementById(&#34;hanoiDiv0&#34;)&#xD;&#xA;    const ctx = canvas.getContext(&#34;2d&#34;)&#xD;&#xA;    function draw() {&#xD;&#xA;&#xD;&#xA;        canvas.style.width = `${div.clientWidth}px`&#xD;&#xA;        canvas.style.height = `${div.clientWidth * .4}px`&#xD;&#xA;        canvas.width = Math.floor(div.clientWidth * window.devicePixelRatio)&#xD;&#xA;        canvas.height = Math.floor(div.clientWidth * window.devicePixelRatio * 9 / 16)&#xD;&#xA;&#xD;&#xA;        const width = canvas.width&#xD;&#xA;        const height = canvas.height&#xD;&#xA;&#xD;&#xA;        const dy = height / (n + 2)&#xD;&#xA;        const dx = width / (n + 1 + n) / 3&#xD;&#xA;&#xD;&#xA;        ctx.clearRect(0, 0, width, height)&#xD;&#xA;        ctx.translate(0, dy)&#xD;&#xA;        &#xD;&#xA;        ctx.fillStyle = &#34;rgb(0,0,0)&#34;&#xD;&#xA;        ctx.fillRect(0, n * dy, width, dy)&#xD;&#xA;&#xD;&#xA;        const time = Date.now()&#xD;&#xA;        const seconds = Math.floor(time / 1000)&#xD;&#xA;        const millis = time % 1000&#xD;&#xA;&#xD;&#xA;        const discCount = [0, 0, 0]&#xD;&#xA;        let discInMotion = -1&#xD;&#xA;        for (let i = n - 1; i &gt;= 0; i--) {&#xD;&#xA;            const p = pole(i, seconds)&#xD;&#xA;            if (p !== pole(i, seconds + 1)) {&#xD;&#xA;                discInMotion = i&#xD;&#xA;                continue&#xD;&#xA;            }&#xD;&#xA;            const centerX = (p + 0.5) * width / 3&#xD;&#xA;            const discWidth = (2 * i + 3) * dx&#xD;&#xA;            const x = centerX - discWidth / 2&#xD;&#xA;            const y = (n - 1 - discCount[p]) * dy&#xD;&#xA;            discCount[p]++&#xD;&#xA;            ctx.fillRect(x, y, discWidth, dy * .9)&#xD;&#xA;        }&#xD;&#xA;        if (discInMotion === -1) {&#xD;&#xA;            window.requestAnimationFrame(draw)&#xD;&#xA;            return&#xD;&#xA;        }&#xD;&#xA;        const percentDone = millis / 1000&#xD;&#xA;        const xFract = accelDecel(percentDone)&#xD;&#xA;        const startPole = pole(discInMotion, seconds)&#xD;&#xA;        const endPole = pole(discInMotion, seconds + 1)&#xD;&#xA;        const xIdx = lerp(startPole, endPole, xFract)&#xD;&#xA;        const centerX = (xIdx + 0.5) * width / 3&#xD;&#xA;        const discWidth = (2 * discInMotion + 3) * dx&#xD;&#xA;        const x = centerX - discWidth / 2&#xD;&#xA;&#xD;&#xA;        let apex = Math.max(discCount[startPole], discCount[endPole], discCount[1])&#xD;&#xA;        apex = Math.min(apex + 1, n)&#xD;&#xA;        const riseDistance = apex - discCount[startPole]&#xD;&#xA;        const riseTime = 2 * Math.sqrt(riseDistance) &#xD;&#xA;        const fallDistance = apex - discCount[endPole]&#xD;&#xA;        const fallTime = Math.sqrt(2 * fallDistance)  &#xD;&#xA;&#xD;&#xA;        let yIdx&#xD;&#xA;        const apexTime = riseTime / (riseTime + fallTime)&#xD;&#xA;        if (percentDone &lt; apexTime) {&#xD;&#xA;            yIdx = lerp(discCount[startPole], apex, accelDecel(percentDone / apexTime))&#xD;&#xA;        } else {&#xD;&#xA;            const pd2 = ((percentDone - apexTime) / (1 - apexTime)) ** 2&#xD;&#xA;            yIdx = lerp(apex, discCount[endPole], pd2)&#xD;&#xA;        }&#xD;&#xA;        const y = (n - 1 - yIdx) * dy&#xD;&#xA;&#xD;&#xA;        ctx.fillRect(x, y, discWidth, dy * .9)&#xD;&#xA;&#xD;&#xA;        window.requestAnimationFrame(draw)&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    window.requestAnimationFrame(draw)&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&lt;div id=&#34;hanoiDiv0&#34; style=&#34;width:100%&#34;&gt;&#xD;&#xA;    &lt;canvas height=&#34;500&#34; id=&#34;canvas0&#34; style=&#34;width:100%&#34; width=&#34;1000&#34;&gt;&lt;/canvas&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;hahahugoshortcode16s1hbhb&#34;&gt;&lt;q&gt;&#xD;&#xA;  When the final tower is completed, time will overflow.&#xD;&#xA;&lt;/q&gt;&lt;/h2&gt;&#xA;&lt;p&gt;This &lt;a href=&#34;#animation&#34;&gt;animation&lt;/a&gt; counts down to the &lt;a href=&#34;#epochalypse&#34;&gt;Epochalypse&lt;/a&gt;&#xA;by displaying the current &lt;a href=&#34;#unix-time&#34;&gt;Unix time&lt;/a&gt;&#xA;as progress in solving a 31 level &lt;a href=&#34;#hanoi&#34;&gt;Tower of Hanoi&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
